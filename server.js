 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })


// -------------------------------- My Code ------------------------------------------
// app.set('trust proxy', true);  //Necessary trust the proxy provider else we will get only the localhost ip address

app.route('/api/whoami/').get(function(req, res) {
  var object = {
    "ipaddress":"",
    "language":"",
    "software":""
  };
  
//   Extract information from the header
  var clientIP = req.headers["x-forwarded-for"].split(",")[0];
  var clientOS = req.headers["user-agent"];
  var from = clientOS.indexOf("(")+1, to = clientOS.indexOf(")");
  var clientLang = req.headers["accept-language"].split(",")[0];
  
//   inject data into object
  object.ipaddress = clientIP;
  object.software = clientOS.slice(from, to);
  object.language = clientLang;

//   Reply the JSON
  res.status(200);
  res.send(object);
});


// -------------------------------- My Code ------------------------------------------


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});



